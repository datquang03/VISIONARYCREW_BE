import nodemailer from 'nodemailer';
import dotenv from 'dotenv';

dotenv.config();

const sendEmail = async (to, subject, text) => {
  try {
    const transporter = nodemailer.createTransport({
      service: 'Gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });
    const mailOptions = {
      from: `"Visionary Crew" <${process.env.EMAIL_USER}>`,
      to,
      subject,
      text,
      html: `<p>${text.replace(/\n/g, '<br>')}</p>`,
    };
    await transporter.sendMail(mailOptions);
  } catch (error) {
    console.error('Error sending email:', error.message);
    throw new Error('Failed to send email');
  }
};

export const sendRegisterEmail = async ({ doctor, patient, schedule }) => {
  // G·ª≠i cho doctor
  if (doctor?.email && doctor?.fullName) {
    const subject = 'Visionary Crew - C√≥ l·ªãch h·∫πn m·ªõi';
    const patientName = patient?.username || patient?.fullName || 'B·ªánh nh√¢n';
    const text = `Xin ch√†o Dr. ${doctor.fullName},\n\nB·∫°n c√≥ l·ªãch h·∫πn m·ªõi t·ª´ ${patientName} v√†o ng√†y ${schedule.date} l√∫c ${schedule.timeSlot?.startTime || ''}.`;
    await sendEmail(doctor.email, subject, text);
  }
  // G·ª≠i cho patient
  if (patient?.email) {
    const subject = 'Visionary Crew - ƒê·∫∑t l·ªãch th√†nh c√¥ng';
    const patientName = patient?.username || patient?.fullName || 'B·∫°n';
    const doctorName = doctor?.fullName || 'B√°c sƒ©';
    const formattedDate = new Date(schedule.date).toLocaleDateString('vi-VN', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const text = `Xin ch√†o ${patientName},\n\n‚úÖ B·∫°n ƒë√£ ƒë·∫∑t l·ªãch th√†nh c√¥ng!\n\nüë®‚Äç‚öïÔ∏è B√°c sƒ©: ${doctorName}\nüìÖ Ng√†y: ${formattedDate}\nüïê Gi·ªù: ${schedule.timeSlot?.startTime || ''}\n\n‚è≥ Tr·∫°ng th√°i: ƒêang ch·ªù b√°c sƒ© x√°c nh·∫≠n\n\nüìû Vui l√≤ng ch·ªù b√°c sƒ© x√°c nh·∫≠n l·ªãch h·∫πn c·ªßa b·∫°n.`;
    await sendEmail(patient.email, subject, text);
  }
};

export const sendCancelEmail = async ({ doctor, patient, schedule, cancelReason, admins }) => {
  if (doctor?.email && doctor?.fullName) {
    const subject = 'Visionary Crew - L·ªãch h·∫πn b·ªã h·ªßy';
    const patientName = patient?.username || patient?.fullName || 'B·ªánh nh√¢n';
    const formattedDate = new Date(schedule.date).toLocaleDateString('vi-VN', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const text = `Xin ch√†o Dr. ${doctor.fullName},\n\n‚ùå L·ªãch h·∫πn b·ªã h·ªßy!\n\nüìÖ Ng√†y: ${formattedDate}\nüïê Gi·ªù: ${schedule.timeSlot?.startTime || ''}\nüë§ B·ªánh nh√¢n: ${patientName}\n\nüìù L√Ω do: ${cancelReason}`;
    await sendEmail(doctor.email, subject, text);
  }
  if (patient?.email) {
    const subject = 'Visionary Crew - H·ªßy l·ªãch th√†nh c√¥ng';
    const patientName = patient?.username || patient?.fullName || 'B·∫°n';
    const doctorName = doctor?.fullName || 'B√°c sƒ©';
    const formattedDate = new Date(schedule.date).toLocaleDateString('vi-VN', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const text = `Xin ch√†o ${patientName},\n\n‚úÖ B·∫°n ƒë√£ h·ªßy l·ªãch h·∫πn th√†nh c√¥ng!\n\nüë®‚Äç‚öïÔ∏è B√°c sƒ©: ${doctorName}\nüìÖ Ng√†y: ${formattedDate}\nüïê Gi·ªù: ${schedule.timeSlot?.startTime || ''}\n\nüìù L√Ω do: ${cancelReason}`;
    await sendEmail(patient.email, subject, text);
  }
  if (admins && Array.isArray(admins)) {
    for (const admin of admins) {
      if (admin?.email) {
        const subject = 'Visionary Crew - L·ªãch h·∫πn b·ªã h·ªßy';
        const patientName = patient?.username || patient?.fullName || 'B·ªánh nh√¢n';
        const doctorName = doctor?.fullName || 'B√°c sƒ©';
        const formattedDate = new Date(schedule.date).toLocaleDateString('vi-VN', { 
          weekday: 'long', 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
        const text = `Admin th√¢n m·∫øn,\n\n‚ùå L·ªãch h·∫πn b·ªã h·ªßy!\n\nüë®‚Äç‚öïÔ∏è B√°c sƒ©: ${doctorName}\nüë§ B·ªánh nh√¢n: ${patientName}\nüìÖ Ng√†y: ${formattedDate}\nüïê Gi·ªù: ${schedule.timeSlot?.startTime || ''}\n\nüìù L√Ω do: ${cancelReason}`;
        await sendEmail(admin.email, subject, text);
      }
    }
  }
};

export const sendRejectEmail = async ({ doctor, patient, schedule, rejectedReason, admins }) => {
  if (patient?.email) {
    const subject = 'Visionary Crew - L·ªãch h·∫πn b·ªã t·ª´ ch·ªëi';
    const patientName = patient?.username || 'B·∫°n';
    const doctorName = doctor?.username || 'B√°c sƒ©';
    const formattedDate = new Date(schedule.date).toLocaleDateString('vi-VN', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const text = `Xin ch√†o ${patientName},\n\n‚ùå L·ªãch h·∫πn b·ªã t·ª´ ch·ªëi!\n\nüë®‚Äç‚öïÔ∏è B√°c sƒ©: ${doctorName}\nüìÖ Ng√†y: ${formattedDate}\nüïê Gi·ªù: ${schedule.timeSlot?.startTime || ''}\n\nüìù L√Ω do: ${rejectedReason}`;
    await sendEmail(patient.email, subject, text);
  }
  if (doctor?.email && doctor?.username) {
    const subject = 'Visionary Crew - ƒê√£ t·ª´ ch·ªëi l·ªãch h·∫πn';
    const formattedDate = new Date(schedule.date).toLocaleDateString('vi-VN', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const text = `Xin ch√†o Dr. ${doctor.username},\n\n‚úÖ B·∫°n ƒë√£ t·ª´ ch·ªëi l·ªãch h·∫πn!\n\nüìÖ Ng√†y: ${formattedDate}\nüïê Gi·ªù: ${schedule.timeSlot?.startTime || ''}\n\nüìù L√Ω do: ${rejectedReason}`;
    await sendEmail(doctor.email, subject, text);
  }
  if (admins && Array.isArray(admins)) {
    for (const admin of admins) {
      if (admin?.email) {
        const subject = 'Visionary Crew - L·ªãch h·∫πn b·ªã t·ª´ ch·ªëi';
        const patientName = patient?.username || 'B·ªánh nh√¢n';
        const doctorName = doctor?.username || 'B√°c sƒ©';
        const formattedDate = new Date(schedule.date).toLocaleDateString('vi-VN', { 
          weekday: 'long', 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
        const text = `Admin th√¢n m·∫øn,\n\n‚ùå L·ªãch h·∫πn b·ªã t·ª´ ch·ªëi!\n\nüë®‚Äç‚öïÔ∏è B√°c sƒ©: ${doctorName}\nüë§ B·ªánh nh√¢n: ${patientName}\nüìÖ Ng√†y: ${formattedDate}\nüïê Gi·ªù: ${schedule.timeSlot?.startTime || ''}\n\nüìù L√Ω do: ${rejectedReason}`;
        await sendEmail(admin.email, subject, text);
      }
    }
  }
};

export const verifyEmail = async (user) => {
  if (!user?.email || !user?.username) {
    throw new Error('User email or username is missing');
  }
  
  const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
  const expires = new Date(Date.now() + 30 * 60 * 1000);
  user.emailVerificationCode = verificationCode;
  user.emailVerificationExpires = expires;
  await user.save();
  const subject = 'Visionary Crew - X√°c minh email';
  const text = `Xin ch√†o ${user.username},\n\nXin h√£y nh·∫≠p ƒëo·∫°n code n√†y ƒë·ªÉ x√°c minh email: ${verificationCode}\n\nN√≥ s·∫Ω h·∫øt h·∫°n sau 30 ph√∫t.`;
  await sendEmail(user.email, subject, text);
};

export default sendEmail;